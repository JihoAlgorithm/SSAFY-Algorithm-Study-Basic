package Prim;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Baekjoon_1197_최소스패닝트리 {
	
	public static class Edge implements Comparable<Edge> {
		int node; double width; 
		
		public Edge(int node, double width) {
			this.node = node; this.width = width; 
		}
		
		@Override 
		public int compareTo(Edge o) {
			return Double.compare(this.width, o.width); }
		}

	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		int V = Integer.parseInt(st.nextToken()); // 노드
		int E = Integer.parseInt(st.nextToken()); // 간선
		
		boolean[] visited = new boolean[V+1];
		ArrayList<Edge> list[] = new ArrayList[V+1];
		
		for(int i = 0; i <= V; i++) {
			list[i] = new ArrayList<>();
		}
		
		for(int i = 0; i < E; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int start = Integer.parseInt(st.nextToken());
			int target = Integer.parseInt(st.nextToken());
			int width = Integer.parseInt(st.nextToken());
			list[start].add(new Edge(target,width));
			list[target].add(new Edge(start,width));
			
		}

		PriorityQueue<Edge> q = new PriorityQueue<>();
		q.add(new Edge(1,0));
		
		int cnt = 0, ans = 0;
		while(!q.isEmpty()) {
			
			if(cnt == V) break;
			
			Edge edge = q.poll();
			
			if(visited[edge.node]) continue;
			visited[edge.node] = true;
			
			ans += edge.width; // 가중치 증가
			
			// 방문하지 않은 노드 큐에 넣어줌
			for(Edge next : list[edge.node]) {
				if(!visited[next.node]) 
					q.add(next);
			}
		}
		
		System.out.println(ans);
	}

}
