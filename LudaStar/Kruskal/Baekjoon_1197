package Prim;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Baekjoon_1197_최소스패닝트리 {
	
	public static class Edge implements Comparable<Edge> {
		int node; double dis; 
		
		public Edge(int node, double dis) {
			this.node = node; this.dis = dis; 
		}
		
		@Override 
		public int compareTo(Edge o) {
			return Double.compare(this.dis, o.dis); }
		}

	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		int V = Integer.parseInt(st.nextToken()); // 노드
		int E = Integer.parseInt(st.nextToken()); // 간선
		
		boolean[] visited = new boolean[V+1];
		ArrayList<Edge> list[] = new ArrayList[V+1];
		
		for(int i = 1; i <= V; i++) {
			list[i] = new ArrayList<>();
		}
		
		for(int i = 0; i < E; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int start = Integer.parseInt(st.nextToken());
			int target = Integer.parseInt(st.nextToken());
			int val = Integer.parseInt(st.nextToken());
			list[start].add(new Edge(target,val));
			list[target].add(new Edge(start,val));
			
		}
		long result = 0;
		PriorityQueue<Edge> q = new PriorityQueue<>();
		q.add(new Edge(0,0)); // 임의의 정점에서 시작
		
		

		System.out.println(result);
	}

}
