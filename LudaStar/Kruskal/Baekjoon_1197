package Kruskal;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Baekjoon_1197_최소스패닝트리 {

	static class Node implements Comparable<Node> {
		int from; 
		int to;
		int weight; 

		public Node(int from, int to, int weight) {
			this.from = from;
			this.to = to;
			this.weight = weight;
		}

		@Override 
		public int compareTo(Node o) {
			return Integer.compare(this.weight, o.weight); 
		}
	}
	
	static int[] parent;
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		int V = Integer.parseInt(st.nextToken()); // 노드
		int E = Integer.parseInt(st.nextToken()); // 간선
		
		PriorityQueue<Node> q = new PriorityQueue<>();
		parent = new int[V+1];
		for(int i = 1; i <=V; i++) parent[i] = i;
		
		for(int i = 0; i < E; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int start = Integer.parseInt(st.nextToken());
			int target = Integer.parseInt(st.nextToken());
			int weight = Integer.parseInt(st.nextToken());
			q.offer(new Node(start, target, weight));
		}
		
		int sum = 0;
		
		while(!q.isEmpty()) {
			Node node = q.poll();
			
			int parentS = find(node.from);
			int parentE = find(node.to);
			
			if(parentS != parentE) {
				union(parentS, parentE);
				sum += node.weight;
			}
		}
		
		System.out.println(sum);
		
	}


	private static void union(int a, int b) {
		parent[a] = b;
	}


	private static int find(int x) {
		if(parent[x] == x) return x;
		else return parent[x] = find(parent[x]);
	}

}
