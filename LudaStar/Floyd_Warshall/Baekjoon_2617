package Floyd_Warshall;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Baekjoon_2617_구슬찾기 {

	static int N, M, mid;
	static boolean[] visited;
	static int[][] arr_h;
	static int[][] arr_l;
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");
		N = Integer.parseInt(st.nextToken());		
		M = Integer.parseInt(st.nextToken());	
		mid = (N+1) / 2;
		
		arr_h = new int[N+1][N+1]; // 무거운 거 (행이 열보다 무거운 상황)
		arr_l = new int[N+1][N+1]; // 가벼운 거 (행이 열보다 가벼운 상황)
		for(int i = 1; i < N+1; i++) {
			for(int j = 1; j < N+1; j++) {
				if(i != j)
					arr_h[i][j] = 987654321; // 가장 큰 값으로 초기화
					arr_l[i][j] = 987654321; 
			}
		}
		
		for(int i = 0; i < M; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			arr_h[a][b] = arr_l[b][a] = 1;
		}
		
        // 플로이드 와샬 알고리즘 수행 (모든 정점들의 경로를 알아야되므로)
        for (int k = 1; k <= N; k++) { // 경유지
            for (int i = 1; i <= N; i++) { // 출발지
                for (int j = 1; j <= N; j++) { // 도착지
                	
                	// 무거운 배열과 가벼운 배열 각각 진행
                    if (arr_h[i][j] > arr_h[i][k] + arr_h[k][j]) {
                    	arr_h[i][j] = arr_h[i][k] + arr_h[k][j];
                    }
                    if (arr_l[i][j] > arr_l[i][k] + arr_l[k][j]) {
                    	arr_l[i][j] = arr_l[i][k] + arr_l[k][j];
                    }
                }
            }
        }
//        for(int i = 1; i < N+1; i++) {
//        	for(int j = 1; j < N+1; j++) {
//        		System.out.print(arr_h[i][j]+ " ");
//        	}
//        	System.out.println();
//        }
        int result = 0;
        for(int i = 1; i < N+1; i++) {
        	int cnt_h = 0, cnt_l = 0;
        	for(int j = 1; j < N+1; j++) {
        		
        		// 배열의 값들이 맥시멈이나 0이 아니면 카운트
        		if(arr_h[i][j] != 987654321 && arr_h[i][j] != 0) {
        			cnt_h++;
        		}
        		if(arr_l[i][j] != 987654321 && arr_l[i][j] != 0) {
        			cnt_l++;
        		}
        	}
        	if(cnt_h >= mid || cnt_l >= mid) result++;
        	
        }
        System.out.println(result);

	}


}
