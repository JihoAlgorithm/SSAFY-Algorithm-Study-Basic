package DFS_BFS;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

class Point {
	int x, y;

	public Point(int x, int y) {
		this.x = x;
		this.y = y;
	}
	
}

public class Baekjoon_1012_유기농배추 {
	
	static int M, N, cabbage;
	static int[][] map;
	static boolean[][] visited;
	static int cnt;
	static int[] dx = {-1, 0, +1, 0};
	static int[] dy = {0, -1, 0, +1};

	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		int T = Integer.parseInt(br.readLine());
		
		for(int tc = 1; tc <= T; tc++) {
			st = new StringTokenizer(br.readLine(), " ");
			M = Integer.parseInt(st.nextToken());
			N = Integer.parseInt(st.nextToken());
			cabbage= Integer.parseInt(st.nextToken());
			
			map = new int[M][N];
			visited = new boolean[M][N];
			cnt = 0;
			
			for(int i = 0; i < cabbage; i++) {
				st = new StringTokenizer(br.readLine(), " ");
				int a = Integer.parseInt(st.nextToken());
				int b = Integer.parseInt(st.nextToken());
				
				map[a][b] = 1;
			}
			
			for(int i = 0; i < M; i++) {
				for(int j = 0; j < N; j++) {
					
					if(map[i][j] == 1 && visited[i][j] == false) {
						bfs(i,j);
					}
					
				}
			}
			System.out.println(cnt);
			
		} // tc
		
		
	}

	private static void bfs(int x, int y) {
		Queue<Point> q = new LinkedList<Point>();
		q.offer(new Point(x,y));
		visited[x][y] = true;
		
		while(!q.isEmpty()) {
			Point p = q.poll();
			int current_x = p.x;
			int current_y = p.y;
			
			for(int i = 0; i < 4; i++) {
				int nx = current_x + dx[i];
				int ny = current_y + dy[i];
				
				if(nx < 0 || ny < 0 || nx >= M || ny >= N) continue;
				
				if(map[nx][ny] == 1 && visited[nx][ny] == false) {
					q.offer(new Point(nx, ny));
					visited[nx][ny] = true;
				}
			}
		}
		cnt++;
	}

}
