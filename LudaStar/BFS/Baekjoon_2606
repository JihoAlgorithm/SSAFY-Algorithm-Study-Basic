package DFS_BFS;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Baekjoon_2606_바이러스 {
	
	static int N, cnt;
	static int[][] adjArray;
	static boolean[] visited, visited2;
	static LinkedList<Integer>[] adjList;
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = null;
		
		N = Integer.parseInt(br.readLine());
		cnt = Integer.parseInt(br.readLine());
		adjArray = new int[N+1][N+1];
		visited = new boolean[N+1];
		visited2 = new boolean[N+1];
		adjList = new LinkedList[N+1];
		
		for(int i = 0; i <= N; i++) {
			adjList[i] = new LinkedList<Integer>();
		}
		
		for(int i = 0; i < cnt; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			
			adjArray[a][b] = 1;
			adjArray[b][a] = 1;
			
			adjList[b].add(a);
			adjList[a].add(b);
		}
		
		// 방문순서를 위해 오름차순
		for(int i = 0; i <= N; i++ ) {
			Collections.sort(adjList[i]);
		}
		
		bfs();
		bfs2();

	}

	// 인접행렬 사용
	private static void bfs() {
		Queue<Integer> q = new LinkedList<>();
		// 1번 컴퓨터가 웜바이러스 걸렸으므로
		q.offer(1);
		visited[1] = true;
		int cnt = 0; // 웜바이러스 걸리는 총 컴퓨터 수
		
		while(!q.isEmpty()) {
			int node =  q.poll();
			
			for(int i = 1; i <= N; i++) {
				if(adjArray[node][i] == 1 && !visited[i]) {
					q.offer(i);
					visited[i] = true;
					cnt++;
				}
			}
		}
		System.out.println(cnt);
	}
	
	
	// 인접리스트 사용
	private static void bfs2() {
		Queue<Integer> q = new LinkedList<>();
		visited2[1] = true;
		q.offer(1);
		
		int cnt = 0; // 웜바이러스 걸리는 총 컴퓨터 수
		
		while(!q.isEmpty()) {
			int node =  q.poll();
			
			Iterator<Integer> iter = adjList[node].listIterator();
			while(iter.hasNext()) {
				int w = iter.next();
				if(!visited2[w]) {
					visited2[w] = true;
					q.offer(w);
					cnt++;
				}
			}
			
		}
		System.out.println(cnt);
	}
}
